import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import torch


def compute_accumulated_transmittance(betas):
    accumulated_transmittance = torch.cumprod(betas, 1)
    accumulated_transmittance[:, 0] = 1.0
    return accumulated_transmittance


def rendering(model, rays_o, rays_d, tn, tf, nb_bins=100, device="cpu"):

    t = torch.linspace(tn, tf, nb_bins).to(device)  # [nb_bins]
    delta = torch.cat((t[1:] - t[:-1], torch.tensor([1e10])))

    x = rays_o.unsqueeze(1) + t.unsqueeze(0).unsqueeze(-1) * rays_d.unsqueeze(
        1
    )  # [nb_rays, nb_bins, 3]

    colors, density = model.intersect(x.reshape(-1, 3))

    colors = colors.reshape((x.shape[0], nb_bins, 3))  # [nb_rays, nb_bins, 3]
    density = density.reshape((x.shape[0], nb_bins))

    alpha = 1 - torch.exp(-density * delta.unsqueeze(0))  # [nb_rays, nb_bins, 1]
    T = compute_accumulated_transmittance(1 - alpha)  # [nb_rays, nb_bins, 1]

    c = (T.unsqueeze(-1) * alpha.unsqueeze(-1) * colors).sum(1)  # [nb_rays, 3]

    return c


class Sphere:
    def __init__(self, p1, r1, c1, p2, r2, c2):
        self.p1 = p1
        self.r1 = r1
        self.c1 = c1

        self.p2 = p2
        self.r2 = r2
        self.c2 = c2

    def intersect(self, x):
        cond = (x[:, 0] - self.p1[0]) ** 2 + (x[:, 1] - self.p1[1]) ** 2 + (
            x[:, 2] - self.p1[2]
        ) ** 2 <= self.r1**2
        num_rays = x.shape[0]
        colors = torch.zeros((num_rays, 3))
        density = torch.zeros((num_rays, 1))

        colors[cond] = self.c1
        density[cond] = 10
        return colors, density


def plot_rays(o, d, t):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection="3d")
    pt1 = o
    pt2 = o + t * d
    for k in range(0, pt1.shape[0], 50):
        plt.plot([pt1[k, 0], pt2[k, 0]], [pt1[k, 1], pt2[k, 1]], [pt1[k, 2], pt2[k, 2]])
    plt.savefig("simple.png")
    return None


def main():
    # define parameters of the camera
    W = 400
    H = 200
    f = 1200

    # creating rays
    rays_o = np.zeros((H * W, 3))
    rays_d = np.zeros((H * W, 3))

    v = np.arange(H)
    u = np.arange(W)

    # create a grid all possible values
    u, v = np.meshgrid(u, v)

    # We can compute the direction vector from a point in the world to the image
    dirs = np.stack((u - W / 2, -(v - H / 2), -np.ones_like(u) * f), axis=-1)
    rays_d = dirs / np.linalg.norm(dirs, axis=2, keepdims=True)
    rays_d = rays_d.reshape(-1, 3)

    plot_rays(rays_o, rays_d, 1)
    s = Sphere(
        np.array([0.0, 0.0, -1.0]),
        0.1,
        np.array([1.0, 0.0, 0.0]),
        np.array([0.2, 0.0, -1.5]),
        0.1,
        np.array([0.0, 0.0, 1.0]),
    )
    model = Sphere(torch.tensor([0, 0, -1]), 0.1, torch.tensor([1.0, 0.0, 0.0]), torch.tensor([0, 0, -1]), 0.1, torch.tensor([1.0, 0.0, 0.0]))
    px_colors = rendering(
        model, torch.from_numpy(rays_o), torch.from_numpy(rays_d), 0.8, 1.2
    )
    img = px_colors.reshape(H, W, 3).cpu().numpy()
    plt.figure(dpi=200)
    plt.imshow(img)


if __name__ == "__main__":
    main()
